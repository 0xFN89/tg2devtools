from ${package}.lib.base import Controller
from tg import expose, validate, flash, redirect
from ${package}.model import DBSession, ${modelname}, metadata
from ${modelnameLower}form import new_form, edit_form
import pylons

#dbsprockets
from dbsprockets.primitives import makeForm, makeTable, getTableValue, makeRecordView
from dbsprockets.saprovider import SAProvider
from cStringIO import StringIO
from genshi import HTML

provider = SAProvider(metadata)

def my_make_links(viewConfig, row):
    pks = viewConfig.metadata.primaryKeys()
    pkString = viewConfig._writePKsToURL(pks, row)
    links = StringIO()
    links.write('<a href="show')
    links.write(pkString)
    links.write('">show</a>|')
    links.write('<a href="edit')
    links.write(pkString)
    links.write('">edit</a>|')
    links.write('<a href="destroy')
    links.write(pkString)
    links.write('">delete</a>')
    return HTML(links.getvalue())

${modelnameLower}_list = makeTable(${modelname}, '${modelnameLower}', makeLinks=my_make_links)
recordView = makeRecordView(${modelname})
#dbsprockets end

class ${modelpackage}(Controller):
    """Basic ${modelname} admin interface"""
    modelname    = '${modelname}'
    tablename    = '${modelnameLower}'
    
    @expose()
    def index(self):
        """handle front page"""
        raise redirect("list")

    @expose("genshi:${package}.templates.${modelpackageLower}.list")
    def list(self, **kw):
        """List records in model"""
        #raw sqlalchemy
        #records = DBSession.query(${modelname}).all()
        #return dict(records = records, modelname = self.modelname)

        #dbsprockets
        value = provider.select(tableName=self.tablename,values=kw)

        pylons.c.w.table = ${modelnameLower}_list
        return dict(value=value, modelname=self.modelname)

    @expose("genshi:${package}.templates.${modelpackageLower}.show")
    def show(self, **kw):
        """Show record in model"""
        #raw sqlalchemy
        #value = DBSession.query(${modelname}).get(int(kw['${id}']))

        #dbsprockets
        pylons.c.w.widget = recordView
        value = provider.selectOnPks(tableName=self.tablename,values=kw)[0]
        return dict(value=value)

    @expose("genshi:${package}.templates.${modelpackageLower}.new_form")
    def new(self, **kw):
        """Form to add new record"""
        pylons.c.w.form = new_form
        return dict(modelname = self.modelname)

    @validate(new_form, error_handler=new)
    @expose()
    def create(self, **kw):
        """Create record to model"""
        #raw sqlalchemy
        #try:
        #     entry = ${modelname}(**kw)
        #except:
        #    entry = ${modelname}() #if not mapped
        #    for attr in kw:
        #        setattr(entry, attr, kw[attr])
        #DBSession.save(entry)
        #DBSession.commit()

        #dbsprockets
        provider.add(tableName=self.tablename, values=kw)

        flash("${modelname} was successfully created.")
        raise redirect("list")

    @expose("genshi:${package}.templates.${modelpackageLower}.edit_form")
    def edit(self, **kw):
        pylons.c.w.form = edit_form

        #raw sqlalchemy
        #try:
        #    value = DBSession.query(${modelname}).get(int(kw['${id}']))
        #except:
        #    flash("Not valid edit")
        #    raise redirect("list")
        
        #dbsprockets     
        value = {}
        pks = sorted(provider.getPrimaryKeys(self.tablename))
        if pks == sorted(kw.keys()):
            value = dict(provider.selectOnPks(self.tablename, values=kw)[0])
        else:
            value.update(kw)

        return dict(modelname = self.modelname, value=value)

    @validate(edit_form, error_handler=edit)
    @expose()
    def update(self, **kw):
        """Update record to model"""
        #raw sqlalchemy
        #record = DBSession.query(${modelname}).get(int(kw['${id}']))
        #for attr in kw:
        #    setattr(record, attr, kw[attr])
        #DBSession.commit()

        #dbsprockets
        provider.edit(tableName=self.tablename, values=kw)

        flash("${modelname} was successfully updated.")
        raise redirect("list")

    @expose()
    def destroy(self, **kw):
        """Destroy record in model"""
        #raw sqlalchemy
        #record = DBSession.query(${modelname}).get(int(kw['${id}']))
        #DBSession.delete(record)
        #DBSession.commit()

        #dbsprockets
        provider.delete(tableName=self.tablename, values=kw)

        flash("${modelname} was successfully destroyed.")
        raise redirect("list")
