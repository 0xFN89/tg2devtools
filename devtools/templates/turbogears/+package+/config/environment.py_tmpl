"""Pylons environment configuration"""
import os

{{if template_engine == 'mako'}}
from mako.lookup import TemplateLookup
{{elif template_engine == 'genshi'}}
from genshi.template import TemplateLoader
{{endif}}
from pylons import config

from pylons.i18n import ugettext
from genshi.filters import Translator
from tg import defaults

{{if sqlalchemy}}
from sqlalchemy import engine_from_config
{{endif}}

import {{package}}.lib.app_globals as app_globals
#import {{package}}.lib.helpers
#from {{package}}.config.routing import make_map
{{if sqlalchemy}}
from {{package}}.model import init_model, DBSession, metadata
{{endif}}

{{if template_engine == 'genshi'}}
def template_loaded(template):
    "Plug-in our i18n function to Genshi."
    template.filters.insert(0, Translator(ugettext))
{{endif}}

def load_environment(global_conf, app_conf):
    """Configure the Pylons environment via the ``pylons.config``
    object
    """
    # Pylons paths
    root = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    paths = dict(root=root,
                 controllers=os.path.join(root, 'controllers'),
                 static_files=os.path.join(root, 'public'),
                 templates=[os.path.join(root, 'templates')])

    # Initialize config with the basic options
    config.init_app(global_conf, app_conf, package='{{package}}', paths=paths)

    # This setups up a set of default route that enables a standard
    # TG2 style object dispatch.   Fell free to overide it with
    # custom routes.  TODO: Link to TG2+routes doc.
    make_map = defaults.make_default_route_map

    config['routes.map'] = make_map()
    config['pylons.app_globals'] = app_globals.Globals()
    #config['pylons.h'] = {{package}}.lib.helpers
    {{if sqlalchemy}}
    
    # Setup SQLAlchemy database engine
    engine = engine_from_config(config, 'sqlalchemy.')
    config['pylons.app_globals'].sa_engine = engine
    # Pass the engine to initmodel, to be able to introspect tables
    init_model(engine)
    DBSession.configure(bind=engine)
    metadata.bind = engine

    # If you'd like to change the default template engine used to render
    # text/html content, edit these options.
    template_engine = 'genshi'
    template_engine_options = {}
    config['buffet.template_engines'].pop()
    config.add_template_engine(template_engine, '${package}.templates',
                               template_engine_options)
    {{endif}}
    
    {{if template_engine == 'mako'}}
    # Create the Mako TemplateLookup, with the default auto-escaping
    config['pylons.app_globals'].mako_lookup = TemplateLookup(
        directories=paths['templates'], input_encoding='utf-8',
        imports=['from webhelpers.html import escape'],
        default_filters=['escape'], output_encoding='utf-8',
        module_directory=os.path.join(app_conf['cache_dir'], 'templates'),
    )
    {{elif template_engine == 'genshi'}}
    # Create the Genshi TemplateLoader
    config['pylons.app_globals'].genshi_loader = TemplateLoader(
        paths['templates'], auto_reload=True)
    {{endif}}
    
    # CONFIGURATION OPTIONS HERE (note: all config options will override
    # any Pylons config options)
